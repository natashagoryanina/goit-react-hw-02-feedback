{"version":3,"sources":["Components/feedbackOptions/FeedbackOptionsStyled.js","Components/feedbackOptions/FeedbackOptions.js","Components/Notification.js","Components/Section.js","Components/statistics/StatisticsStyled.js","Components/statistics/Statistics.js","styles/globalStyles.js","Components/App.js","index.js"],"names":["ButtonContainer","styled","div","FeedbackOptions","options","onLeaveFeedback","Object","keys","map","key","className","name","type","onClick","Notification","message","Section","children","title","StatisticsContainer","Statistics","good","neutral","bad","total","positivePercentage","GlobalStyles","createGlobalStyle","App","state","props","initialValue","countFeedback","e","target","setState","prev","countTotalFeedback","countPositiveFeedbackPercentage","positivePerc","parseInt","this","Component","defaultProps","ReactDOM","render","document","getElementById"],"mappings":"+MAEaA,EAAmBC,IAAOC,IAAX,oK,OCgBbC,EAdS,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,gBAC/B,OACI,cAACL,EAAD,UACKM,OAAOC,KAAKH,GAASI,KAAI,SAACC,GAAD,OACtB,wBAAQC,UAAU,MAAMC,KAAMF,EAAKG,KAAK,SAASC,QAASR,EAA1D,SAA4EI,UCO7EK,EAZM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OACI,mCACI,4BAAIA,OCUDC,EAbC,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,MACxB,OACI,gCACI,6BAAKA,IACJD,MCLAE,EAAsBlB,IAAOC,IAAV,uMCsBjBkB,EApBI,SAAC,GAAqD,IAApDC,EAAmD,EAAnDA,KAAMC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,IAAKC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,mBAC5C,OACI,eAACN,EAAD,WACI,oBAAGT,UAAU,OAAb,mBAA2BW,KAC3B,oBAAGX,UAAU,UAAb,sBAAiCY,KACjC,oBAAGZ,UAAU,MAAb,kBAAyBa,KACzB,wCAAWC,KACX,oDAAuBC,EAAvB,WCHGC,EANMC,YAAH,uECMZC,E,4MAKFC,MAAQ,CACJR,KAAM,EAAKS,MAAMC,aACjBT,QAAS,EAAKQ,MAAMC,aACpBR,IAAK,EAAKO,MAAMC,c,EAIpBC,cAAgB,SAACC,GACb,IAAMtB,EAAOsB,EAAEC,OAAOvB,KACtB,EAAKwB,UAAS,SAACC,GACX,OAAO,eACFzB,EAAOyB,EAAKzB,GAAQ,O,EAMjC0B,mBAAqB,WACjB,MAA6B,EAAKR,MAElC,OAFA,EAAOR,KAAP,EAAaC,QAAb,EAAsBC,K,EAK1Be,gCAAkC,WAC9B,IAAId,EAAQ,EAAKa,qBACjB,GAAc,IAAVb,EACA,OAAO,EAEX,IAAIe,EAAiC,IAAlB,EAAKV,MAAMR,KAAaG,EAC3C,OAAOgB,SAASD,I,4CAGpB,WACI,OACI,iCACI,cAAC,EAAD,IACA,cAAC,EAAD,CAASrB,MAAM,wBAAf,SACI,cAAC,EAAD,CAAiBd,QAASqC,KAAKZ,MAAOxB,gBAAiBoC,KAAKT,kBAEhE,cAAC,EAAD,CAASd,MAAM,aAAf,SAQmC,IAA9BuB,KAAKJ,qBAA+B,cAAC,EAAD,CAActB,QAAQ,sBAEvD,cAAC,EAAD,CAAYM,KAAMoB,KAAKZ,MAAMR,KAAMC,QAASmB,KAAKZ,MAAMP,QACvDC,IAAKkB,KAAKZ,MAAMN,IAAKC,MAAOiB,KAAKJ,qBACjCZ,mBAAoBgB,KAAKH,6C,GAxD/BI,aAAZd,EACKe,aAAe,CAClBZ,aAAc,GA8DPH,Q,MCnEfgB,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.5f3408e8.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const ButtonContainer =  styled.div`\n    display: flex;\n    .btn {\n        margin-right: 10px;\n        background-color: cornflowerblue;\n        color: #ffffff;\n    }\n`","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ButtonContainer } from './FeedbackOptionsStyled';\n\nconst FeedbackOptions = ({options, onLeaveFeedback}) => {\n    return (\n        <ButtonContainer>\n            {Object.keys(options).map((key) => \n                <button className=\"btn\" name={key} type=\"button\" onClick={onLeaveFeedback}>{key}</button>\n            )}\n        </ButtonContainer>\n    );\n};\n\nFeedbackOptions.propTypes = {\n    onLeaveFeedback: PropTypes.func\n};\n\nexport default FeedbackOptions;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Notification = ({message}) => {\n    return (\n        <>\n            <p>{message}</p>\n        </>\n    );\n};\n\nNotification.propTypes = {\n    message: PropTypes.string\n};\n\nexport default Notification;","import React from \"react\";\nimport PropTypes from 'prop-types'\n\nconst Section = ({children, title}) => {\n    return (\n        <div>\n            <h1>{title}</h1>\n            {children}\n        </div>\n    );\n};\n\nSection.propTypes = {\n    title: PropTypes.string\n};\n\nexport default Section;","import styled from 'styled-components';\n\nexport const StatisticsContainer = styled.div`\n    p {\n        font-weight: 700;\n    }\n   .good {\n       color: #07ca59;\n   }\n   .neutral {\n       color: #0059ff;\n   }\n   .bad {\n       color: #e02727;\n   }\n`;","import React from 'react';\nimport PropTypes from 'prop-types'\nimport { StatisticsContainer } from './StatisticsStyled';\n\nconst Statistics = ({good, neutral, bad, total, positivePercentage}) => {\n    return (\n        <StatisticsContainer>\n            <p className='good'>Good: {good}</p>\n            <p className='neutral'>Neutral: {neutral}</p>\n            <p className='bad'>Bad: {bad}</p>\n            <p>Total: {total}</p>\n            <p>Positive feedback: {positivePercentage}%</p>\n        </StatisticsContainer>\n    );\n};\n\nStatistics.propTypes = {\n    good: PropTypes.number,\n    neutral: PropTypes.number,\n    bad: PropTypes.number,\n    total: PropTypes.func,\n    positivePercentage: PropTypes.func,\n};\n\nexport default Statistics;\n","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyles = createGlobalStyle `\n    body {\n        padding: 15px;\n    }\n`;\n\nexport default GlobalStyles;","import React, {Component} from 'react';\nimport FeedbackOptions from './feedbackOptions/FeedbackOptions';\nimport Notification from './Notification';\nimport Section from './Section';\nimport Statistics from './statistics/Statistics';\nimport GlobalStyles from '../styles/globalStyles';\n\n\nclass App extends Component {\n    static defaultProps = {\n        initialValue: 0,\n    };\n\n    state = { \n        good: this.props.initialValue,\n        neutral: this.props.initialValue,\n        bad: this.props.initialValue,\n        //visible: false\n    };\n\n    countFeedback = (e) => {\n        const name = e.target.name;\n        this.setState((prev) => {\n            return {\n                [name]: prev[name] + 1,\n                //visible: true\n            }\n        });\n    };\n\n    countTotalFeedback = () => {\n        const {good, neutral, bad} = this.state;\n        let total = good + neutral + bad;\n        return total;\n    };\n\n    countPositiveFeedbackPercentage = () => {\n        let total = this.countTotalFeedback();\n        if (total === 0) {\n            return 0;\n        };\n        let positivePerc = this.state.good * 100 / total;\n        return parseInt(positivePerc);\n    }\n\n    render() {\n        return (\n            <main>\n                <GlobalStyles></GlobalStyles>\n                <Section title=\"Please leave feedback\">\n                    <FeedbackOptions options={this.state} onLeaveFeedback={this.countFeedback}/>\n                </Section>\n                <Section title=\"Statistics\">\n                    {/* {this.state.visible ? (\n                        <Statistics good={this.state.good} neutral={this.state.neutral} \n                        bad={this.state.bad} total={this.countTotalFeedback()} \n                        positivePercentage={this.countPositiveFeedbackPercentage()}/>)\n                    : (\n                        <Notification message=\"No feedback given\"/>\n                    )} */}\n                    {this.countTotalFeedback() === 0  ? (<Notification message=\"No feedback given\"/>) :\n                    (\n                        <Statistics good={this.state.good} neutral={this.state.neutral} \n                        bad={this.state.bad} total={this.countTotalFeedback()} \n                        positivePercentage={this.countPositiveFeedbackPercentage()}/>)}\n\n                </Section>\n            </main>\n        );\n    };\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\nimport './index.css';\n\nReactDOM.render (\n    <App />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}